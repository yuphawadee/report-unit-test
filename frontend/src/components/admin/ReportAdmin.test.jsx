import { describe, it, expect, vi, beforeAll } from "vitest"
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import ReportAdmin from "./ReportAdmin";
import axios from "axios";

// üëá mock jwt-decode ‡πÅ‡∏•‡∏∞ axios
vi.mock("jwt-decode", () => ({
    default: () => ({ role: "admin" }), // ‡πÉ‡∏´‡πâ decode ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
}));
vi.mock("axios");

describe("ReportAdmin Component", () => {
    // const mockData = {
    //     id: 1,
    //     tracking_id: "RPT-123",
    //     title: "‡∏ô‡πâ‡∏≥‡∏õ‡∏£‡∏∞‡∏õ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏´‡∏•",
    //     details: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
    //     created_at: "2025-04-03T14:52:58.000Z",
    //     status: "in_progress",
    //     image: "test.jpg",
    // };

    beforeEach(() => {
        localStorage.setItem("token", "mocked-token");
        // axios.get.mockResolvedValue({ data: [mockData] });
        axios.get.mockResolvedValue({
            data: [
                {
                    id: 1,
                    tracking_id: "RPT-123",
                    title: "‡∏ô‡πâ‡∏≥‡∏õ‡∏£‡∏∞‡∏õ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏´‡∏•",
                    details: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
                    created_at: "2025-04-03T14:52:58.000Z",
                    status: "pending",
                    image: "test.jpg",
                },
            ],
        });

        axios.put.mockResolvedValue({
            status: 200,
        });
    });

    beforeAll(() => {
        window.alert = vi.fn();
    });

    it("renders loading state", () => {
        axios.get.mockImplementation(() => new Promise(() => { })); // pending promise ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ loading ‡∏Ñ‡πâ‡∏≤‡∏á
        render(<ReportAdmin />);
        expect(screen.getByText("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")).toBeInTheDocument();
    });

    it('renders data when fetch is successful', async () => {
        render(<ReportAdmin />);

        await screen.findByText('‡∏ô‡πâ‡∏≥‡∏õ‡∏£‡∏∞‡∏õ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏´‡∏•');

        // ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤ loading ‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
        expect(screen.queryByText(/‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•.../)).not.toBeInTheDocument();

        expect(screen.getByTestId('status')).toHaveTextContent('‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß');
        expect(screen.getByTestId('report-date')).toHaveTextContent('3/4/2568');
        expect(screen.getByTitle('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î')).toBeInTheDocument();
        expect(screen.getByTitle('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å')).toBeInTheDocument();
        expect(screen.getByTitle('‡∏•‡∏ö')).toBeInTheDocument();
    });

    it('shows error message when fetch fails', async () => {
        axios.get.mockRejectedValue(new Error('Failed to fetch'));

        render(<ReportAdmin />);

        const errorMessage = await screen.findByText(/‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ/i);
        expect(errorMessage).toBeInTheDocument();
    });

    it('should open modal and show all report details', async () => {
        render(<ReportAdmin />);

        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î
        await screen.findByText('‡∏ô‡πâ‡∏≥‡∏õ‡∏£‡∏∞‡∏õ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏´‡∏•');

        // ‡πÉ‡∏ä‡πâ getByRole ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'
        const detailButton = screen.getByRole('button', { name: /‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î/i });
        fireEvent.click(detailButton);

        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ modal ‡πÇ‡∏´‡∏•‡∏î
        await screen.findByText(/‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤/i);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô modal
        expect(screen.getByTestId('report-tracking-id')).toHaveTextContent('RPT-123');
        expect(screen.getByTestId('report-title')).toHaveTextContent('‡∏ô‡πâ‡∏≥‡∏õ‡∏£‡∏∞‡∏õ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏´‡∏•');
        expect(screen.getByTestId('report-details')).toHaveTextContent('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î');
        expect(screen.getByTestId('report-created-at')).toHaveTextContent('3/4/2568');
        expect(screen.getByTestId('report-status')).toHaveTextContent('‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß');

    });

    it('should update status in the table', async () => {
        render(<ReportAdmin />);
      
        await screen.findByText('‡∏ô‡πâ‡∏≥‡∏õ‡∏£‡∏∞‡∏õ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏´‡∏•');
      
        // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏° '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'
        const detailButton = screen.getByRole('button', { name: /‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î/i });
        fireEvent.click(detailButton);
      
        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ modal ‡πÇ‡∏´‡∏•‡∏î
        await screen.findByText(/‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤/i);
      
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà
        const statusSelect = screen.getByTestId('status-select');
        fireEvent.change(statusSelect, { target: { value: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£' } });
      
        // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        const saveButton = screen.getByTestId('save-status-button');
        fireEvent.click(saveButton);
      
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ status ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
        await waitFor(() => {
          const statusEl = screen.getByText('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£');  // ‡πÉ‡∏ä‡πâ getByText ‡πÅ‡∏ó‡∏ô getByTestId
          expect(statusEl).toBeInTheDocument(); // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ status ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        });
      });
      
});
